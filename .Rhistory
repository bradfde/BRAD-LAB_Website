segments(1:1,d$upper[1:1],1:2,d$upper[1:1],lty=3)
segments(1:1,d$lower[1:2],1:2,d$lower[1:2],lty=3)
text(3, 1, paste("P-value",round(t.test(x,y,var.equal=TRUE)$p.value, digits=3)), cex = .8)
#dev.off()
#Â© Dan
#This scripts will simulate a single sample, and calculate the mean
#The gold background illustrates the 95% prediction interval (PI), The orange background illustrates the 95% confidence interval
#The black dotted line illustrates the true mean. 95% of the CI should contain the true mean
#Then, a simulation is run. The simulations generates a large number of additional samples
#The simulation returns the number of CI that contain the mean, and returns the % of means from future studies that fall within the 95% of the original study
#This is known as the capture percentage. It differs from (and is lower than) the confidence interval
if(!require(ggplot2)){install.packages('ggplot2')}
library(ggplot2)
if(!require(Rcpp)){install.packages('Rcpp')}
library(Rcpp)
n=20 #set sample size
nSims<-100000 #set number of simulations
x<-rnorm(n = n, mean = 100, sd = 15) #create sample from normal distribution
#95% Confidence Interval
CIU<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
CIL<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
#95% Prediction Interval
PIU<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1+1/n)
PIL<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1+1/n)
#plot data
#png(file="CI_mean.png",width=2000,height=2000, res = 300)
ggplot(as.data.frame(x), aes(x))  +
geom_rect(aes(xmin=PIL, xmax=PIU, ymin=0, ymax=Inf), fill="gold") + #draw orange CI area
geom_rect(aes(xmin=CIL, xmax=CIU, ymin=0, ymax=Inf), fill="#E69F00") + #draw orange CI area
geom_histogram(colour="black", fill="grey", aes(y=..density..), binwidth=2) +
xlab("IQ") + ylab("number of people")  + ggtitle("Data") + theme_bw(base_size=20) +
theme(panel.grid.major.x = element_blank(), axis.text.y = element_blank(), panel.grid.minor.x = element_blank()) +
geom_vline(xintercept=mean(x), colour="black", linetype="dashed", size=1) +
coord_cartesian(xlim=c(50,150)) + scale_x_continuous(breaks=c(50,60,70,80,90,100,110,120,130,140,150)) +
annotate("text", x = mean(x), y = 0.02, label = paste("Mean = ",round(mean(x)),"\n","SD = ",round(sd(x)),sep=""), size=6.5)
#dev.off()
#Simulate Confidence Intervals
CIU_sim<-numeric(nSims)
CIL_sim<-numeric(nSims)
mean_sim<-numeric(nSims)
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = 100, sd = 15) #create sample from normal distribution
CIU_sim[i]<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
CIL_sim[i]<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
mean_sim[i]<-mean(x) #store means of each sample
}
#Save only those simulations where the true value was inside the 95% CI
CIU_sim<-CIU_sim[CIU_sim<100]
CIL_sim<-CIL_sim[CIL_sim>100]
cat((100*(1-(length(CIU_sim)/nSims+length(CIL_sim)/nSims))),"% of the 95% confidence intervals contained the true mean")
#Calculate how many times the observed mean fell within the 95% CI of the original study
mean_sim<-mean_sim[mean_sim>CIL&mean_sim<CIU]
cat("The capture percentage for the plotted study, or the % of values within the observed confidence interval from",CIL,"to",CIU,"is:",100*length(mean_sim)/nSims,"%")
#This scripts will simulate a single sample, and calculate the mean
#The gold background illustrates the 95% prediction interval (PI), The orange background illustrates the 95% confidence interval
#The black dotted line illustrates the true mean. 95% of the CI should contain the true mean
#Then, a simulation is run. The simulations generates a large number of additional samples
#The simulation returns the number of CI that contain the mean, and returns the % of means from future studies that fall within the 95% of the original study
#This is known as the capture percentage. It differs from (and is lower than) the confidence interval
if(!require(ggplot2)){install.packages('ggplot2')}
library(ggplot2)
if(!require(Rcpp)){install.packages('Rcpp')}
library(Rcpp)
n=20 #set sample size
nSims<-100000 #set number of simulations
x<-rnorm(n = n, mean = 100, sd = 15) #create sample from normal distribution
#95% Confidence Interval
CIU<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
CIL<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
#95% Prediction Interval
PIU<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1+1/n)
PIL<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1+1/n)
#plot data
#png(file="CI_mean.png",width=2000,height=2000, res = 300)
ggplot(as.data.frame(x), aes(x))  +
geom_rect(aes(xmin=PIL, xmax=PIU, ymin=0, ymax=Inf), fill="gold") + #draw orange CI area
geom_rect(aes(xmin=CIL, xmax=CIU, ymin=0, ymax=Inf), fill="#E69F00") + #draw orange CI area
geom_histogram(colour="black", fill="grey", aes(y=..density..), binwidth=2) +
xlab("IQ") + ylab("number of people")  + ggtitle("Data") + theme_bw(base_size=20) +
theme(panel.grid.major.x = element_blank(), axis.text.y = element_blank(), panel.grid.minor.x = element_blank()) +
geom_vline(xintercept=mean(x), colour="black", linetype="dashed", size=1) +
coord_cartesian(xlim=c(50,150)) + scale_x_continuous(breaks=c(50,60,70,80,90,100,110,120,130,140,150)) +
annotate("text", x = mean(x), y = 0.02, label = paste("Mean = ",round(mean(x)),"\n","SD = ",round(sd(x)),sep=""), size=6.5)
#dev.off()
#Simulate Confidence Intervals
CIU_sim<-numeric(nSims)
CIL_sim<-numeric(nSims)
mean_sim<-numeric(nSims)
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = 100, sd = 15) #create sample from normal distribution
CIU_sim[i]<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
CIL_sim[i]<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
mean_sim[i]<-mean(x) #store means of each sample
}
#Save only those simulations where the true value was inside the 95% CI
CIU_sim<-CIU_sim[CIU_sim<100]
CIL_sim<-CIL_sim[CIL_sim>100]
cat((100*(1-(length(CIU_sim)/nSims+length(CIL_sim)/nSims))),"% of the 95% confidence intervals contained the true mean")
#Calculate how many times the observed mean fell within the 95% CI of the original study
mean_sim<-mean_sim[mean_sim>CIL&mean_sim<CIU]
cat("The capture percentage for the plotted study, or the % of values within the observed confidence interval from",CIL,"to",CIU,"is:",100*length(mean_sim)/nSims,"%")
#This scripts will simulate a single sample, and calculate the mean
#The gold background illustrates the 95% prediction interval (PI), The orange background illustrates the 95% confidence interval
#The black dotted line illustrates the true mean. 95% of the CI should contain the true mean
#Then, a simulation is run. The simulations generates a large number of additional samples
#The simulation returns the number of CI that contain the mean, and returns the % of means from future studies that fall within the 95% of the original study
#This is known as the capture percentage. It differs from (and is lower than) the confidence interval
if(!require(ggplot2)){install.packages('ggplot2')}
library(ggplot2)
if(!require(Rcpp)){install.packages('Rcpp')}
library(Rcpp)
n=20 #set sample size
nSims<-100000 #set number of simulations
x<-rnorm(n = n, mean = 100, sd = 15) #create sample from normal distribution
#95% Confidence Interval
CIU<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
CIL<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
#95% Prediction Interval
PIU<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1+1/n)
PIL<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1+1/n)
#plot data
#png(file="CI_mean.png",width=2000,height=2000, res = 300)
ggplot(as.data.frame(x), aes(x))  +
geom_rect(aes(xmin=PIL, xmax=PIU, ymin=0, ymax=Inf), fill="gold") + #draw orange CI area
geom_rect(aes(xmin=CIL, xmax=CIU, ymin=0, ymax=Inf), fill="#E69F00") + #draw orange CI area
geom_histogram(colour="black", fill="grey", aes(y=..density..), binwidth=2) +
xlab("IQ") + ylab("number of people")  + ggtitle("Data") + theme_bw(base_size=20) +
theme(panel.grid.major.x = element_blank(), axis.text.y = element_blank(), panel.grid.minor.x = element_blank()) +
geom_vline(xintercept=mean(x), colour="black", linetype="dashed", size=1) +
coord_cartesian(xlim=c(50,150)) + scale_x_continuous(breaks=c(50,60,70,80,90,100,110,120,130,140,150)) +
annotate("text", x = mean(x), y = 0.02, label = paste("Mean = ",round(mean(x)),"\n","SD = ",round(sd(x)),sep=""), size=6.5)
#dev.off()
#Simulate Confidence Intervals
CIU_sim<-numeric(nSims)
CIL_sim<-numeric(nSims)
mean_sim<-numeric(nSims)
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = 100, sd = 15) #create sample from normal distribution
CIU_sim[i]<-mean(x)+qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
CIL_sim[i]<-mean(x)-qt(0.975, df = n-1)*sd(x)*sqrt(1/n)
mean_sim[i]<-mean(x) #store means of each sample
}
#Save only those simulations where the true value was inside the 95% CI
CIU_sim<-CIU_sim[CIU_sim<100]
CIL_sim<-CIL_sim[CIL_sim>100]
cat((100*(1-(length(CIU_sim)/nSims+length(CIL_sim)/nSims))),"% of the 95% confidence intervals contained the true mean")
#Calculate how many times the observed mean fell within the 95% CI of the original study
mean_sim<-mean_sim[mean_sim>CIL&mean_sim<CIU]
cat("The capture percentage for the plotted study, or the % of values within the observed confidence interval from",CIL,"to",CIU,"is:",100*length(mean_sim)/nSims,"%")
#CI mean dif based on code from: http://stackoverflow.com/questions/16913849/how-to-plot-absolute-values-and-differences-including-confidence-intervals
m1 <- 3 #mean group 1
m2 <- 5 #mean group 2
sd1 <- 4.5 #sd group 1
sd2 <- 3.0 #sd group 2
n1 <- 50 #sample size group 1
n2 <- 50 #sample size group 2
x<-rnorm(n = n1, mean = m1, sd = sd1) #get sample group 1
y<-rnorm(n = n2, mean = m2, sd = sd2) #get sample group 2
error1 <- qnorm(0.975)*sd(x)/sqrt(n1) #get error group 1
error2 <- qnorm(0.975)*sd(y)/sqrt(n2) #get error group 2
CI_l_1 <- mean(x)-error1 #calculate confidence interval lower limit group 1
CI_u_1 <- mean(x)+error1 #calculate confidence interval upper limit group 1
CI_l_2 <- mean(y)-error2 #calculate confidence interval lower limit group 2
CI_u_2 <- mean(y)+error2 #calculate confidence interval upper limit group 2
se <- sqrt(sd(x)*sd(x)/n1+sd(y)*sd(y)/n2) #calc pooled standard error
error <- qt(0.975,df=n1+n2-2)*se #error mean dif
mdif<-mean(y)-mean(x) #mean dif
CI_l_d <- mdif-error #CI lower limit difference
CI_u_d <- mdif+error #CI upper limit difference
d = data.frame(labels=c("X","Y","Difference"),
mean=c(mean(x),mean(y),mdif),
lower=c(CI_l_1,CI_l_2,CI_l_d),
upper = c(CI_u_1,CI_u_2,CI_u_d))
#png(file=paste('CI_means_meandiff.png'),width=4000,height=6000, res = 1000)
plot(NA, xlim=c(.5,3.5), ylim=c(0, max(d$upper[1:2]+1)), bty="l", xaxt="n", xlab="",ylab="Mean")
points(d$mean[1:2], pch=19)
segments(1,d$mean[1],5,d$mean[1],lty=2)
segments(2,d$mean[2],5,d$mean[2],lty=2)
axis(1, 1:3, d$labels)
segments(1:2,d$lower[1:2],1:2,d$upper[1:2])
axis(4, seq((d$mean[1]-3),(d$mean[1]+5),by=1), seq(-3,5,by=1), las=1)
points(3,d$mean[1]+d$mean[3],pch=19, cex=1.5)
segments(3,d$mean[1]+d$lower[3],3,d$mean[1]+d$upper[3], lwd=2)
mtext("Difference", side=4, at=d$mean[1], line=3)
segments(1:1,d$upper[1:1],1:2,d$upper[1:1],lty=3)
segments(1:1,d$lower[1:2],1:2,d$lower[1:2],lty=3)
text(3, 1, paste("P-value",round(t.test(x,y,var.equal=TRUE)$p.value, digits=3)), cex = .8)
#dev.off()
swirl()
1:20
pi:10
15:1
`:`
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2, times = 10))
rep(c(0,1,2), times = 10))
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
blogdown:::serve_site()
setwd("C:/Users/Psychology/Desktop/GitHub/BRAD-LAB_Website")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
setwd("C:/Users/Psychology/Desktop/GitHub/BRAD-LAB_Website")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
setwd("C:/Users/Psychology/Desktop/GitHub")
blogdown:::serve_site()
setwd("C:/Users/Psychology/Desktop/GitHub/BRAD-LAB_Website/public")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
?git
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
hugo -v
blogdown:::serve_site()
git
blogdown:::serve_site()
setwd("C:/Users/Psychology/Desktop/LabWebsiteBackup_7_7_20/Website")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
setwd('C:/Users/Psychology/OneDrive - University of Miami/Collaborations/JuttaYale/IJP/')
d = read.spss('IJP_11.14.2019.sav', to.data.frame =TRUE)
#load packages
library(lmSupport)
library(readxl)
library(plyr)
library(dplyr)
library(reshape2)
library(data.table)
library(foreign)
library(psych)
library(car)
library(pwr)
setwd('C:/Users/Psychology/OneDrive - University of Miami/Collaborations/JuttaYale/IJP/')
d = read.spss('IJP_11.14.2019.sav', to.data.frame =TRUE)
options(device="windows")
#windows(10,10)
windows(8,10)
layout(matrix(c(1, 1,
1, 1,
2, 3), nrow=3, byrow=TRUE))
#m <- rbind(c(1, 1), c(2, 3))
#layout(m)
#layout.show(3)
#Create plot region, suppress all output for finer control
#par(mar=c(3,4.25,1.75,1),oma=c(0,0,0,0))#oma is 0 by default
#plot(x=c(0,450),y=c(0,125), type='n', xlab = '', ylab = '', axes=FALSE, frame.plot=FALSE)
#COMPUTE filter_$=(ExcludeTPT_STL = 0 AND TPTBaseline_MeanSTLMag>5 AND ExcludeSelfReport  ~= 1).
#Remove people without task data, startle non responders, and withoutself report
factor(d$ExcludeTPT_STL)
levels(d$ExcludeTPT_STL)
d  = subset(d, TPT_STL_UncertMean!="NA")#
d  = subset(d, PSWQtotal!="NA")#
d = subset(d, d$ExcludeSelfReport!="Failed attention checks")
d = subset(d, d$ExcludeTPT_STL!="Notes say sensor came loose")
d = subset(d, d$ExcludeTPT_STL!="Notes say had trouble staying awake")
d = subset (d, TPTBaseline_MeanSTLMag>5)
#Threat type factor data frame)
#Omnibus ANOVA
#Center baseline starlte
d$cTPTBaseline_MeanSTLMag = d$TPTBaseline_MeanSTLMag-mean(d$TPTBaseline_MeanSTLMag)
d$cPSWQtotal = d$PSWQtotal-mean(d$PSWQtotal)
d$AnyLifeAnxDisorder = factor(d$AnyLifeAnxDisorder, labels = c('No Lifetime Anxiety Disorder', 'Lifetime Anxiety Disorder'))
contrasts(d$AnyLifeAnxDisorder) = varContrasts(d$AnyLifeAnxDisorder, Type = 'POC', POCList = list(c(-.5,.5)), Labels = 'No_v_Anx')
d = varRegressors(d, 'AnyLifeAnxDisorder', c('No_v_Anx'))
mUncert = lm(TPT_STL_UncertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + No_v_Anx + No_v_Anx*PSWQtotal, data=d)
mCert = lm(TPT_STL_CertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + No_v_Anx + No_v_Anx*PSWQtotal, data=d)
mSafe = lm(TPT_STL_SafeMean~cTPTBaseline_MeanSTLMag + PSWQtotal + No_v_Anx + No_v_Anx*PSWQtotal, data=d)
dNew = data.frame(cTPTBaseline_MeanSTLMag = 0,PSWQtotal = seq(20,80,by=1),No_v_Anx=0)
pUncert = modelPredictions(mUncert,dNew)
pCert = modelPredictions(mCert,dNew)
pSafe = modelPredictions(mSafe,dNew)
plot(x=c(20,80),y=c(0,125), type='n', xlab = '', ylab = '', axes=FALSE, frame.plot=FALSE)
#Add and label axes,  Note:  Use expression() to handle special symbols like microvolt on y-axis.
#mtext requires cex for label size
axis(1, lwd=3, at=seq(20,80, by=10), cex.axis=1.25)
mtext (expression(bold(paste('Worry Level (PSWQ)', sep=''))), side=1, line=3, cex=1.75)
axis(2, lwd=3, at=seq(0,125, by=25), cex.axis=1.25)
mtext(expression(bold(paste('Startle (', mu, 'V)', sep=''))), side=2, line=1.75, cex=1.75)
#Draw confidence bands.  NOTE: Bands drawn before prediction lines in case of overlap
#Draw new polygon shaded confidence bands with transparency.  NOTE: Bands drawn before prediction lines in case of overlap
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,2], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,3], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,2], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,3], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,2], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,3], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
#Draw lines
lines(x=dNew$PSWQtotal,y=pUncert[,1], type='l', lty=2, lwd=3.75, col= (rgb(0,0,.8)))
lines(x=dNew$PSWQtotal,y=pCert[,1], type='l', lty=3, lwd=3.75, col= (rgb(.8,0,0)))
lines(x=dNew$PSWQtotal,y=pSafe[,1], type='l', lty=1, lwd=3.75, col= 'dark green')
#Draw points for uncertain
#Scale residuals by diving by their square root
RScaleU = residuals(mUncert) / sqrt(length(residuals(mUncert)))
dPointsU = data.frame(PSWQtotal = mUncert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,No_v_Anx=0)
dPointsU = modelPredictions(mUncert,dPointsU)
dPointsU$Y = dPointsU$Predicted + RScaleU
#IF doing unscaled!
#dPointsU$Y = dPointsU$Predicted + residuals(mUncert)
#
points(dPointsU$PSWQtotal,dPointsU$Y, pch = 5, col = (rgb(0, 0, 1)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
############
#Draw points for Certain
#Scale residuals by diving by their square root
RScaleC = residuals(mCert) / sqrt(length(residuals(mCert)))
dPointsC = data.frame(PSWQtotal = mCert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,No_v_Anx=0)
dPointsC = modelPredictions(mCert,dPointsC)
dPointsC$Y = dPointsC$Predicted + RScaleC
#IF doing unscaled!
#dPointsC$Y = dPointsC$Predicted + residuals(mCert)
#
points(dPointsC$PSWQtotal,dPointsC$Y, pch = 1, col = (rgb(1, 0, 0)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
#Draw points for Safe
#Scale residuals by diving by their square root
RScaleS = residuals(mSafe) / sqrt(length(residuals(mSafe)))
dPointsS = data.frame(PSWQtotal = mSafe$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,No_v_Anx=0)
dPointsS = modelPredictions(mSafe,dPointsS)
dPointsS$Y = dPointsS$Predicted + RScaleS
#IF doing unscaled!
#dPointsS$Y = dPointsS$Predicted + residuals(mSafe)
#
points(dPointsS$PSWQtotal,dPointsS$Y, pch = 3, col = "dark green")   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
legend('topright',c('Uncertain', 'Certain', 'Safety'), lty=c(2,3,1), pch=c(5,1,3), col = c('blue', 'red','dark green'), lwd=2, inset=.03,bty='n', cex =1.5)
text(50,125,expression(paste('A. Full Sample',sep ='')),cex=1.75,col=(rgb(0, 0, 0)))
##############################################################
#############Past Anxiety Only#########################################
##############################################################
mUncert = lm(TPT_STL_UncertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
mCert = lm(TPT_STL_CertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
mSafe = lm(TPT_STL_SafeMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
dNew = data.frame(cTPTBaseline_MeanSTLMag = 0,PSWQtotal = seq(40,80,by=1),AnyLifeAnxDisorder='Lifetime Anxiety Disorder')
pUncert = modelPredictions(mUncert,dNew)
pCert = modelPredictions(mCert,dNew)
pSafe = modelPredictions(mSafe,dNew)
plot(x=c(40,80),y=c(0,125), type='n', xlab = '', ylab = '', axes=FALSE, frame.plot=FALSE)
#Add and label axes,  Note:  Use expression() to handle special symbols like microvolt on y-axis.
#mtext requires cex for label size
axis(1, lwd=3, at=seq(40,80, by=10), cex.axis=1.25)
mtext (expression(bold(paste('Worry Level (PSWQ)', sep=''))), side=1, line=3, cex=1.25)
axis(2, lwd=3, at=seq(0,125, by=25), cex.axis=1.25)
mtext(expression(bold(paste('Startle (', mu, 'V)', sep=''))), side=2, line=2, cex=1.25)
#Draw confidence bands.  NOTE: Bands drawn before prediction lines in case of overlap
#Draw new polygon shaded confidence bands with transparency.  NOTE: Bands drawn before prediction lines in case of overlap
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,2], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,3], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,2], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,3], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,2], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,3], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
#Draw lines
lines(x=dNew$PSWQtotal,y=pUncert[,1], type='l', lty=2, lwd=3.75, col= (rgb(0,0,.8)))
lines(x=dNew$PSWQtotal,y=pCert[,1], type='l', lty=3, lwd=3.75, col= (rgb(.8,0,0)))
lines(x=dNew$PSWQtotal,y=pSafe[,1], type='l', lty=1, lwd=3.75, col= 'dark green')
#Draw points for uncertain
#Scale residuals by diving by their square root
RScaleU = residuals(mUncert) / sqrt(length(residuals(mUncert)))
dPointsU = data.frame(PSWQtotal = mUncert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'Lifetime Anxiety Disorder')
dPointsU = modelPredictions(mUncert,dPointsU)
dPointsU$Y = dPointsU$Predicted + RScaleU
#IF doing unscaled!
#dPointsU$Y = dPointsU$Predicted + residuals(mUncert)
X = d$No_v_Anx
#
#points(dPointsU$PSWQtotal,dPointsU$Y, pch = 5, col = (rgb(0, 0, 1)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
points(dPointsU$PSWQtotal[X==.5],dPointsU$Y[X==.5], pch = 5, col = (rgb(0, 0, 1))) #, pch=1, cex = .6, col = (rgb(0, 0, 0))
############
#Draw points for Certain
#Scale residuals by diving by their square root
RScaleC = residuals(mCert) / sqrt(length(residuals(mCert)))
dPointsC = data.frame(PSWQtotal = mCert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'Lifetime Anxiety Disorder')
dPointsC = modelPredictions(mCert,dPointsC)
dPointsC$Y = dPointsC$Predicted + RScaleC
#IF doing unscaled!
#dPointsC$Y = dPointsC$Predicted + residuals(mCert)
#
#points(dPointsC$PSWQtotal,dPointsC$Y, pch = 1, col = (rgb(1, 0, 0)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
points(dPointsC$PSWQtotal[X==.5],dPointsC$Y[X==.5], pch = 1, col = (rgb(1, 0, 0))) #, pch=1, cex = .6, col = (rgb(0, 0, 0))
#Draw points for Safe
#Scale residuals by diving by their square root
RScaleS = residuals(mSafe) / sqrt(length(residuals(mSafe)))
dPointsS = data.frame(PSWQtotal = mSafe$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'Lifetime Anxiety Disorder')
dPointsS = modelPredictions(mSafe,dPointsS)
dPointsS$Y = dPointsS$Predicted + RScaleS
#IF doing unscaled!
#dPointsS$Y = dPointsS$Predicted + residuals(mSafe)
#
#points(dPointsS$PSWQtotal,dPointsS$Y, pch = 3, col = "dark green")   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
points(dPointsS$PSWQtotal[X==.5],dPointsS$Y[X==.5], pch = 3, col = 'dark green') #, pch=1, cex = .6, col = (rgb(0, 0, 0))
text(60,125,expression(paste('B. Lifetime Anxiety Disorder',sep ='')),cex=1.75,col=(rgb(0, 0, 0)))
#-------------------------------------------------------------------------------------------------#
##############################################################
#############No Anxiety Only#########################################
##############################################################
mUncert = lm(TPT_STL_UncertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
mCert = lm(TPT_STL_CertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
mSafe = lm(TPT_STL_SafeMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
dNew = data.frame(cTPTBaseline_MeanSTLMag = 0,PSWQtotal = seq(20,80,by=1),AnyLifeAnxDisorder='No Lifetime Anxiety Disorder')
pUncert = modelPredictions(mUncert,dNew)
pCert = modelPredictions(mCert,dNew)
pSafe = modelPredictions(mSafe,dNew)
plot(x=c(20,80),y=c(0,125), type='n', xlab = '', ylab = '', axes=FALSE, frame.plot=FALSE)
#Add and label axes,  Note:  Use expression() to handle special symbols like microvolt on y-axis.
#mtext requires cex for label size
axis(1, lwd=3, at=seq(20,80, by=10), cex.axis=1.25)
mtext (expression(bold(paste('Worry Level (PSWQ)', sep=''))), side=1, line=3, cex=1.25)
axis(2, lwd=3, at=seq(0,125, by=25), cex.axis=1.25)
mtext(expression(bold(paste('Startle (', mu, 'V)', sep=''))), side=2, line=2, cex=1.25)
#Draw confidence bands.  NOTE: Bands drawn before prediction lines in case of overlap
#Draw new polygon shaded confidence bands with transparency.  NOTE: Bands drawn before prediction lines in case of overlap
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,2], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,3], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,2], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,3], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,2], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,3], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
#Draw lines
lines(x=dNew$PSWQtotal,y=pUncert[,1], type='l', lty=2, lwd=3.75, col= (rgb(0,0,.8)))
lines(x=dNew$PSWQtotal,y=pCert[,1], type='l', lty=3, lwd=3.75, col= (rgb(.8,0,0)))
lines(x=dNew$PSWQtotal,y=pSafe[,1], type='l', lty=1, lwd=3.75, col= 'dark green')
#Draw points for uncertain
#Scale residuals by diving by their square root
RScaleU = residuals(mUncert) / sqrt(length(residuals(mUncert)))
dPointsU = data.frame(PSWQtotal = mUncert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'No Lifetime Anxiety Disorder')
dPointsU = modelPredictions(mUncert,dPointsU)
dPointsU$Y = dPointsU$Predicted + RScaleU
#IF doing unscaled!
#dPointsU$Y = dPointsU$Predicted + residuals(mUncert)
#
#points(dPointsU$PSWQtotal,dPointsU$Y, pch = 5, col = (rgb(0, 0, 1)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
points(dPointsU$PSWQtotal[X==-.5],dPointsU$Y[X==-.5], pch = 5, col = (rgb(0, 0, 1))) #, pch=1, cex = .6, col = (rgb(0, 0, 0))
############
#Draw points for Certain
#Scale residuals by diving by their square root
RScaleC = residuals(mCert) / sqrt(length(residuals(mCert)))
dPointsC = data.frame(PSWQtotal = mCert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'No Lifetime Anxiety Disorder')
dPointsC = modelPredictions(mCert,dPointsC)
dPointsC$Y = dPointsC$Predicted + RScaleC
#IF doing unscaled!
#dPointsC$Y = dPointsC$Predicted + residuals(mCert)
#
points(dPointsC$PSWQtotal,dPointsC$Y, pch = 1, col = (rgb(1, 0, 0)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
points(dPointsC$PSWQtotal[X==-.5],dPointsC$Y[X==-.5], pch = 1, col = (rgb(1, 0, 0))) #, pch=1, cex = .6, col = (rgb(0, 0, 0))
#Draw points for Safe
#Scale residuals by diving by their square root
RScaleS = residuals(mSafe) / sqrt(length(residuals(mSafe)))
dPointsS = data.frame(PSWQtotal = mSafe$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'No Lifetime Anxiety Disorder')
dPointsS = modelPredictions(mSafe,dPointsS)
dPointsS$Y = dPointsS$Predicted + RScaleS
#IF doing unscaled!
#dPointsS$Y = dPointsS$Predicted + residuals(mSafe)
#
#points(dPointsS$PSWQtotal,dPointsS$Y, pch = 3, col = "dark green")   #, pch=1, cex = .6, col = (rgb(0, 0, 0))
points(dPointsS$PSWQtotal[X==-.5],dPointsS$Y[X==-.5], pch = 3, col = 'dark green') #, pch=1, cex = .6, col = (rgb(0, 0, 0))
text(50,125,expression(paste('C. No Anxiety Disorder',sep ='')),cex=1.75,col=(rgb(0, 0, 0)))
install.packages("updateR")
install.packages("installr")
updateR()

#load packages
library(lmSupport)
library(readxl)

library(plyr)
library(dplyr)
library(reshape2)
library(data.table)
library(foreign)
library(psych)
library(car)

library(pwr)




setwd('C:/Users/Psychology/OneDrive - University of Miami/Collaborations/JuttaYale/IJP/')
d = read.spss('IJP_11.14.2019.sav', to.data.frame =TRUE)



options(device="windows")

#windows(10,10)
windows(8,10)

layout(matrix(c(1, 1,
                1, 1,
                2, 3), nrow=3, byrow=TRUE))
#m <- rbind(c(1, 1), c(2, 3))
#layout(m)
#layout.show(3)

#Create plot region, suppress all output for finer control
#par(mar=c(3,4.25,1.75,1),oma=c(0,0,0,0))#oma is 0 by default 
#plot(x=c(0,450),y=c(0,125), type='n', xlab = '', ylab = '', axes=FALSE, frame.plot=FALSE) 






#COMPUTE filter_$=(ExcludeTPT_STL = 0 AND TPTBaseline_MeanSTLMag>5 AND ExcludeSelfReport  ~= 1).
#Remove people without task data, startle non responders, and withoutself report 
factor(d$ExcludeTPT_STL)
levels(d$ExcludeTPT_STL)
d  = subset(d, TPT_STL_UncertMean!="NA")#
d  = subset(d, PSWQtotal!="NA")#
d = subset(d, d$ExcludeSelfReport!="Failed attention checks")
d = subset(d, d$ExcludeTPT_STL!="Notes say sensor came loose")
d = subset(d, d$ExcludeTPT_STL!="Notes say had trouble staying awake")
d = subset (d, TPTBaseline_MeanSTLMag>5)



#Threat type factor data frame) 
#Omnibus ANOVA
#Center baseline starlte 
d$cTPTBaseline_MeanSTLMag = d$TPTBaseline_MeanSTLMag-mean(d$TPTBaseline_MeanSTLMag)
d$cPSWQtotal = d$PSWQtotal-mean(d$PSWQtotal)


d$AnyLifeAnxDisorder = factor(d$AnyLifeAnxDisorder, labels = c('No Lifetime Anxiety Disorder', 'Lifetime Anxiety Disorder'))
contrasts(d$AnyLifeAnxDisorder) = varContrasts(d$AnyLifeAnxDisorder, Type = 'POC', POCList = list(c(-.5,.5)), Labels = 'No_v_Anx')

d = varRegressors(d, 'AnyLifeAnxDisorder', c('No_v_Anx'))

mUncert = lm(TPT_STL_UncertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + No_v_Anx + No_v_Anx*PSWQtotal, data=d)
mCert = lm(TPT_STL_CertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + No_v_Anx + No_v_Anx*PSWQtotal, data=d)
mSafe = lm(TPT_STL_SafeMean~cTPTBaseline_MeanSTLMag + PSWQtotal + No_v_Anx + No_v_Anx*PSWQtotal, data=d)


dNew = data.frame(cTPTBaseline_MeanSTLMag = 0,PSWQtotal = seq(20,80,by=1),No_v_Anx=0)
pUncert = modelPredictions(mUncert,dNew)
pCert = modelPredictions(mCert,dNew)
pSafe = modelPredictions(mSafe,dNew)


plot(x=c(20,80),y=c(0,125), type='n', xlab = '', ylab = '', axes=FALSE, frame.plot=FALSE)



#Add and label axes,  Note:  Use expression() to handle special symbols like microvolt on y-axis.
#mtext requires cex for label size
axis(1, lwd=3, at=seq(20,80, by=10), cex.axis=1.25)
mtext (expression(bold(paste('Worry Level (PSWQ)', sep=''))), side=1, line=3, cex=1.75)
axis(2, lwd=3, at=seq(0,125, by=25), cex.axis=1.25)
mtext(expression(bold(paste('Startle (', mu, 'V)', sep=''))), side=2, line=1.75, cex=1.75)


#Draw confidence bands.  NOTE: Bands drawn before prediction lines in case of overlap
#Draw new polygon shaded confidence bands with transparency.  NOTE: Bands drawn before prediction lines in case of overlap
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,2], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,3], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)

polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,2], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,3], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)

polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,2], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,3], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)

#Draw lines
lines(x=dNew$PSWQtotal,y=pUncert[,1], type='l', lty=2, lwd=3.75, col= (rgb(0,0,.8)))
lines(x=dNew$PSWQtotal,y=pCert[,1], type='l', lty=3, lwd=3.75, col= (rgb(.8,0,0)))
lines(x=dNew$PSWQtotal,y=pSafe[,1], type='l', lty=1, lwd=3.75, col= 'dark green')

#Draw points for uncertain 

#Scale residuals by diving by their square root
RScaleU = residuals(mUncert) / sqrt(length(residuals(mUncert)))

dPointsU = data.frame(PSWQtotal = mUncert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,No_v_Anx=0)
dPointsU = modelPredictions(mUncert,dPointsU)
dPointsU$Y = dPointsU$Predicted + RScaleU
#IF doing unscaled! 
#dPointsU$Y = dPointsU$Predicted + residuals(mUncert)
#
points(dPointsU$PSWQtotal,dPointsU$Y, pch = 5, col = (rgb(0, 0, 1)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))


############


#Draw points for Certain 

#Scale residuals by diving by their square root
RScaleC = residuals(mCert) / sqrt(length(residuals(mCert)))

dPointsC = data.frame(PSWQtotal = mCert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,No_v_Anx=0)
dPointsC = modelPredictions(mCert,dPointsC)
dPointsC$Y = dPointsC$Predicted + RScaleC
#IF doing unscaled! 
#dPointsC$Y = dPointsC$Predicted + residuals(mCert)
#

points(dPointsC$PSWQtotal,dPointsC$Y, pch = 1, col = (rgb(1, 0, 0)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))


#Draw points for Safe 

#Scale residuals by diving by their square root
RScaleS = residuals(mSafe) / sqrt(length(residuals(mSafe)))

dPointsS = data.frame(PSWQtotal = mSafe$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,No_v_Anx=0)
dPointsS = modelPredictions(mSafe,dPointsS)
dPointsS$Y = dPointsS$Predicted + RScaleS
#IF doing unscaled! 
#dPointsS$Y = dPointsS$Predicted + residuals(mSafe)
#

points(dPointsS$PSWQtotal,dPointsS$Y, pch = 3, col = "dark green")   #, pch=1, cex = .6, col = (rgb(0, 0, 0))



legend('topright',c('Uncertain', 'Certain', 'Safety'), lty=c(2,3,1), pch=c(5,1,3), col = c('blue', 'red','dark green'), lwd=2, inset=.03,bty='n', cex =1.5)

text(50,125,expression(paste('A. Full Sample',sep ='')),cex=1.75,col=(rgb(0, 0, 0)))


##############################################################
#############Past Anxiety Only#########################################
##############################################################

 

mUncert = lm(TPT_STL_UncertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
mCert = lm(TPT_STL_CertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
mSafe = lm(TPT_STL_SafeMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)

dNew = data.frame(cTPTBaseline_MeanSTLMag = 0,PSWQtotal = seq(40,80,by=1),AnyLifeAnxDisorder='Lifetime Anxiety Disorder')
pUncert = modelPredictions(mUncert,dNew)
pCert = modelPredictions(mCert,dNew)
pSafe = modelPredictions(mSafe,dNew)


plot(x=c(40,80),y=c(0,125), type='n', xlab = '', ylab = '', axes=FALSE, frame.plot=FALSE)



#Add and label axes,  Note:  Use expression() to handle special symbols like microvolt on y-axis.
#mtext requires cex for label size
axis(1, lwd=3, at=seq(40,80, by=10), cex.axis=1.25)
mtext (expression(bold(paste('Worry Level (PSWQ)', sep=''))), side=1, line=3, cex=1.25)
axis(2, lwd=3, at=seq(0,125, by=25), cex.axis=1.25)
mtext(expression(bold(paste('Startle (', mu, 'V)', sep=''))), side=2, line=2, cex=1.25)


#Draw confidence bands.  NOTE: Bands drawn before prediction lines in case of overlap
#Draw new polygon shaded confidence bands with transparency.  NOTE: Bands drawn before prediction lines in case of overlap
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,2], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,3], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)

polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,2], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,3], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)

polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,2], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,3], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)

#Draw lines
lines(x=dNew$PSWQtotal,y=pUncert[,1], type='l', lty=2, lwd=3.75, col= (rgb(0,0,.8)))
lines(x=dNew$PSWQtotal,y=pCert[,1], type='l', lty=3, lwd=3.75, col= (rgb(.8,0,0)))
lines(x=dNew$PSWQtotal,y=pSafe[,1], type='l', lty=1, lwd=3.75, col= 'dark green')

#Draw points for uncertain 

#Scale residuals by diving by their square root
RScaleU = residuals(mUncert) / sqrt(length(residuals(mUncert)))

dPointsU = data.frame(PSWQtotal = mUncert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'Lifetime Anxiety Disorder')
dPointsU = modelPredictions(mUncert,dPointsU)
dPointsU$Y = dPointsU$Predicted + RScaleU
#IF doing unscaled! 
#dPointsU$Y = dPointsU$Predicted + residuals(mUncert)

X = d$No_v_Anx
#
#points(dPointsU$PSWQtotal,dPointsU$Y, pch = 5, col = (rgb(0, 0, 1)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))

points(dPointsU$PSWQtotal[X==.5],dPointsU$Y[X==.5], pch = 5, col = (rgb(0, 0, 1))) #, pch=1, cex = .6, col = (rgb(0, 0, 0))
              

############


#Draw points for Certain 

#Scale residuals by diving by their square root
RScaleC = residuals(mCert) / sqrt(length(residuals(mCert)))

dPointsC = data.frame(PSWQtotal = mCert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'Lifetime Anxiety Disorder')
dPointsC = modelPredictions(mCert,dPointsC)
dPointsC$Y = dPointsC$Predicted + RScaleC
#IF doing unscaled! 
#dPointsC$Y = dPointsC$Predicted + residuals(mCert)
#

#points(dPointsC$PSWQtotal,dPointsC$Y, pch = 1, col = (rgb(1, 0, 0)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))

points(dPointsC$PSWQtotal[X==.5],dPointsC$Y[X==.5], pch = 1, col = (rgb(1, 0, 0))) #, pch=1, cex = .6, col = (rgb(0, 0, 0))

#Draw points for Safe 

#Scale residuals by diving by their square root
RScaleS = residuals(mSafe) / sqrt(length(residuals(mSafe)))

dPointsS = data.frame(PSWQtotal = mSafe$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'Lifetime Anxiety Disorder')
dPointsS = modelPredictions(mSafe,dPointsS)
dPointsS$Y = dPointsS$Predicted + RScaleS
#IF doing unscaled! 
#dPointsS$Y = dPointsS$Predicted + residuals(mSafe)
#

#points(dPointsS$PSWQtotal,dPointsS$Y, pch = 3, col = "dark green")   #, pch=1, cex = .6, col = (rgb(0, 0, 0))

points(dPointsS$PSWQtotal[X==.5],dPointsS$Y[X==.5], pch = 3, col = 'dark green') #, pch=1, cex = .6, col = (rgb(0, 0, 0))

text(60,125,expression(paste('B. Lifetime Anxiety Disorder',sep ='')),cex=1.75,col=(rgb(0, 0, 0)))


#-------------------------------------------------------------------------------------------------#



##############################################################
#############No Anxiety Only#########################################
##############################################################

mUncert = lm(TPT_STL_UncertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
mCert = lm(TPT_STL_CertMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)
mSafe = lm(TPT_STL_SafeMean~cTPTBaseline_MeanSTLMag + PSWQtotal + AnyLifeAnxDisorder + AnyLifeAnxDisorder*PSWQtotal, data=d)

dNew = data.frame(cTPTBaseline_MeanSTLMag = 0,PSWQtotal = seq(20,80,by=1),AnyLifeAnxDisorder='No Lifetime Anxiety Disorder')
pUncert = modelPredictions(mUncert,dNew)
pCert = modelPredictions(mCert,dNew)
pSafe = modelPredictions(mSafe,dNew)


plot(x=c(20,80),y=c(0,125), type='n', xlab = '', ylab = '', axes=FALSE, frame.plot=FALSE)



#Add and label axes,  Note:  Use expression() to handle special symbols like microvolt on y-axis.
#mtext requires cex for label size
axis(1, lwd=3, at=seq(20,80, by=10), cex.axis=1.25)
mtext (expression(bold(paste('Worry Level (PSWQ)', sep=''))), side=1, line=3, cex=1.25)
axis(2, lwd=3, at=seq(0,125, by=25), cex.axis=1.25)
mtext(expression(bold(paste('Startle (', mu, 'V)', sep=''))), side=2, line=2, cex=1.25)


#Draw confidence bands.  NOTE: Bands drawn before prediction lines in case of overlap
#Draw new polygon shaded confidence bands with transparency.  NOTE: Bands drawn before prediction lines in case of overlap
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,2], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pUncert[,3], rev(pUncert[,1])),col = (rgb(0, 0, .8,.25)), border = NA)

polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,2], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pCert[,3], rev(pCert[,1])),col = (rgb(1, 0, 0,.25)), border = NA)

polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,2], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)
polygon(c(dNew$PSWQtotal, rev(dNew$PSWQtotal)), c(pSafe[,3], rev(pSafe[,1])),col = (rgb(0, 1, 0,.25)), border = NA)

#Draw lines
lines(x=dNew$PSWQtotal,y=pUncert[,1], type='l', lty=2, lwd=3.75, col= (rgb(0,0,.8)))
lines(x=dNew$PSWQtotal,y=pCert[,1], type='l', lty=3, lwd=3.75, col= (rgb(.8,0,0)))
lines(x=dNew$PSWQtotal,y=pSafe[,1], type='l', lty=1, lwd=3.75, col= 'dark green')

#Draw points for uncertain 

#Scale residuals by diving by their square root
RScaleU = residuals(mUncert) / sqrt(length(residuals(mUncert)))

dPointsU = data.frame(PSWQtotal = mUncert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'No Lifetime Anxiety Disorder')
dPointsU = modelPredictions(mUncert,dPointsU)
dPointsU$Y = dPointsU$Predicted + RScaleU
#IF doing unscaled! 
#dPointsU$Y = dPointsU$Predicted + residuals(mUncert)
#
#points(dPointsU$PSWQtotal,dPointsU$Y, pch = 5, col = (rgb(0, 0, 1)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))

points(dPointsU$PSWQtotal[X==-.5],dPointsU$Y[X==-.5], pch = 5, col = (rgb(0, 0, 1))) #, pch=1, cex = .6, col = (rgb(0, 0, 0))

############


#Draw points for Certain 

#Scale residuals by diving by their square root
RScaleC = residuals(mCert) / sqrt(length(residuals(mCert)))

dPointsC = data.frame(PSWQtotal = mCert$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'No Lifetime Anxiety Disorder')
dPointsC = modelPredictions(mCert,dPointsC)
dPointsC$Y = dPointsC$Predicted + RScaleC
#IF doing unscaled! 
#dPointsC$Y = dPointsC$Predicted + residuals(mCert)
#

points(dPointsC$PSWQtotal,dPointsC$Y, pch = 1, col = (rgb(1, 0, 0)))   #, pch=1, cex = .6, col = (rgb(0, 0, 0))

points(dPointsC$PSWQtotal[X==-.5],dPointsC$Y[X==-.5], pch = 1, col = (rgb(1, 0, 0))) #, pch=1, cex = .6, col = (rgb(0, 0, 0))

#Draw points for Safe 

#Scale residuals by diving by their square root
RScaleS = residuals(mSafe) / sqrt(length(residuals(mSafe)))

dPointsS = data.frame(PSWQtotal = mSafe$model$PSWQtotal,cTPTBaseline_MeanSTLMag = 0,AnyLifeAnxDisorder = 'No Lifetime Anxiety Disorder')
dPointsS = modelPredictions(mSafe,dPointsS)
dPointsS$Y = dPointsS$Predicted + RScaleS
#IF doing unscaled! 
#dPointsS$Y = dPointsS$Predicted + residuals(mSafe)
#

#points(dPointsS$PSWQtotal,dPointsS$Y, pch = 3, col = "dark green")   #, pch=1, cex = .6, col = (rgb(0, 0, 0))

points(dPointsS$PSWQtotal[X==-.5],dPointsS$Y[X==-.5], pch = 3, col = 'dark green') #, pch=1, cex = .6, col = (rgb(0, 0, 0))


text(50,125,expression(paste('C. No Anxiety Disorder',sep ='')),cex=1.75,col=(rgb(0, 0, 0)))

